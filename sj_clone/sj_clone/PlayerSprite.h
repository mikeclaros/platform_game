#pragma once
#include "stdafx.h"
#include "Vertices.h"


/////////////////////////////////////////////
///	@file PlayerSprite.h
////////////////////////////////////////////




//////////////////////////////////////////////
/// @class	PlayerSprite
/// @brief	player avatar sprite object
///
/// - file for platform sprites
/// - inherited from VisibleObject
///
/////////////////////////////////////////////
class PlayerSprite : public VisibleObject{
public:

	////////////////////////////////
	//CONSTRUCTORS DESTRUCTORS

	/// Constructor
	PlayerSprite();
	/// Destructor
	~PlayerSprite();

	////////////////////////////////
	//DRAW


	/////////////////////////////////////////////
	///	@brief updates player sprite
	///	@param[in]	elapsedTime elapsed time in
	///				seconds
	///
	/////////////////////////////////////////////
	void update(float elapsedTime);

	/////////////////////////////////////////////
	///	@brief	draw sprite in renderwindow
	///	@param[in] rw reference from specified
	///				window
	/////////////////////////////////////////////
	void draw(sf::RenderWindow& rw);


	////////////////////////////////////
	//COLLISION DETECTION AND HANDLING

	
	////////////////////////////////////////////
	/// @brief		checks for collisions
	/// @return		true if collding
	////////////////////////////////////////////
	bool isColliding();


	////////////////////////////////////////////
	/// @brief		offset sprite a set distance
	///
	////////////////////////////////////////////
	void offsetSprite();

	//
	////////////////////////////////


	////////////////////////////////
	//GETTERS

	////////////////////////////////////////////
	/// @brief		gets sprite velocity
	/// @return		sf::Vector2f that represents
	///				velocity of the player sprite
	////////////////////////////////////////////
	sf::Vector2f getVelocity() const;

	////////////////////////////////////////////
	/// @brief		gets center of sprite
	/// @return		sf::Vector2f represents
	///				center of sprite
	////////////////////////////////////////////
	sf::Vector2f getCenter();

	//
	////////////////////////////////
	
	

private:


	////////////////////////////////
	//ATTRIBUTES


	//spacial information
	sf::Vector2f _velocity;
	sf::Vector2f _maxFallVelocity;
	bool _isGrounded;


	//timer related
	sf::Clock _counterClock;

	
	
	//workaround for clock starting immediately
	bool _firstPass;
	Vertices _Vertices;
};